{
  "pt": [
      {
          "id": 1,
          "title": "Pajó Indica",
          "content": "Esse foi um projeto muito interessante de se fazer, acho que eu poderia dizer que foi o primeiro projeto que poderia ser usado de uma forma séria pois a ideia por trás é muito interessante.\n\nTudo começou quando eu estava falando com um amigo escritor, ele veio com a ideia de criar um site que tivesse um sistema de recomendação de livros já que grandes empresas geralmente não recomendam livros menos populares por diferentes motivos. \n\nEntão após um tempo de conversa e discussões acerca das capacidades do site decidimos criar o Pajó.\n\nComo esse é um projeto fullstack, eu comecei pelo coração da aplicação, que nesse caso seria o backend. Planejei como seria o algoritmo de recomendações e acabei inventando um e implementando-o utilizando javascript (node.js).\n\nComo eu realmente queria me desafiar, também desenvolvi o projeto com testes, coisa que eu nunca tinha feito antes. Para realizar os testes utilizei o Jest framework.\n\nDepois que o coração da aplicação ficou pronto, tive que começar a fazer o frontend. Esse meu amigo além de escritor é também um ótimo designer. Ele me enviou os protótipos, logos e basicamente a identidade visual inteira do site e eu fiz a parte de implementação, ou seja, transformei tudo em código.\n\nA tecnologia para fazer o frontend foi o Vue.js, algo que eu também até então nunca havia utilizado, foi bem divertido ter aprendido como usar esse framework.\n\nAs redes do meu amigo escritor e designer são:\nLinkedin: <a href='https://www.linkedin.com/in/jorge-possamai/' target='_blank'>https://www.linkedin.com/in/jorge-possamai/</a> \nYoutube: <a href='https://www.youtube.com/@jorgeluizpossamai4409' target='_blank'>https://www.youtube.com/@jorgeluizpossamai4409</a>\n",
          "technologies": ["Typeorm", "Postgre", "Typescript", "Vue.js", "HTML", "CSS", "Jest", "Node"],
          "brief": "Sistema Fullstack de Recomendação de Livros que retorna livros similares junto com a sua porcentagem de compatibilidade.",
          "video": "https://www.youtube.com/embed/RnKp_-TiTDc",
          "github": "https://httpcats.com/401",
          "lang": "pt"
      },
    {                                                                                  
      "id": 2,                                                                       
      "title": "Files to Sent",                                        
      "content": "Esse projeto tem uma história interessante. Tudo começou quando eu tive a vontade de criar um sistema que enviaria arquivos para pessoas automaticamente através do WhatsApp. Pra fazer isso eu precisaria de algumas coisas como: uma API, a minha própria API e claro um sistema seguro.\n\nQuando eu fui pesquisar por uma API do Whatsapp que me permitisse fazer o que eu queria, descobri infelizmente segundo alguns sites que eu visitei que a API não era de graça, o que seria um problema pra mim já que o único dinheiro guardado que eu possuía foi usado para ajudar os meus pais porém mesmo assim eu queria desenvolver esse sistema.\n\nDepois de um dia pensando em como contornar essa situação, eu lembrei do Telegram e fui pesquisar sobre e para a minha surpresa era de graça. Claro que o BOT do Telegram não é perfeito já que possui algumas limitações como o BOT não poder iniciar conversas por exemplo.\n\nJá que o BOT do Telegram não consegue iniciar conversas eu tive que adicionar algumas mudanças no conceito da minha aplicação e ficou algo assim:\n\n\t1 - Um “User Account” cria uma conta no meu servidor.\n\t2 - Quem quiser receber os arquivos enviados pelo usuário “User Account” precisa enviar uma mensagem para o BOT primeiro.\n\t3 - O “User Account” faz um POST request para um endpoint com a URL do arquivo que ele deseja enviar.\n\nSe tudo aconteceu da forma esperada o que irá acontecer é algo como isso:\n<img src=\"https://i.imgur.com/cF7KU52.png\" alt=\"pessoa enviando arquivos para outras pessoas\">\n\nClaro que teve outras coisas que eu precisei fazer nessa aplicação, como por exemplo criar um sistema de validação de conta enviando um email automático. Ou seja, para o “User Account” poder usar o meu serviço ele precisa validar a sua conta ao clicar no link que ele receberá no email informado.\n",
      "technologies": ["Typeorm", "Postgre", "Typescript", "Node", "Argon2", "Nodemailer"],                              
      "brief":"REST API com sistema de cadastro e autenticação que possibilita usuarios a enviarem arquivos através de um Bot do Telegram",                   
      "video": "https://www.youtube.com/embed/SG5KAqUulP0",                        
      "github": "https://github.com/patrickReiis/Files-to-Sent",
      "lang":"pt"
    }, 
    {
      "id": 3,
      "title":"Planejador de Tarefas",
      "content": "\nNão tem muito o que dizer sobre esse projeto, já que todo mundo já fez um planejador de tarefas e se tu não fez, tu vai :D\n\nBrincadeiras à parte, eu estava muito feliz por começar esse projeto pois foi a primeira vez que eu usei Postgres com o Nodejs. Então pra começar esse projeto eu precisava de um jeito de conectar um banco de dados com o meu servidor, felizmente isso não foi tão difícil já que depois de umas pesquisas na internet consegui resolver o problema.\n\nUm problema que eu tive (propositalmente) foi que eu não usei nenhum framework para fazer os comandos no meu banco de dados, eu fiz tudo manualmente sem usar um ORM.\n\nÉ claro que em um projeto real que fosse hospedado eu não faria isso já que provavelmente deixaria o sistema mais vulnerável a falhas de segurança como um SQL injection porém como foi um projeto com o propósito de aprender e de criar alguma coisa, eu decidi não usar um ORM.\n\nUma vantagem de fazer projetos de uma maneira low level é que tu consegue aprender muito mais tendo em vista que tu precisa implementar todas as funcionalidades desejadas por conta.\n",
      "technologies": ["Node", "Postgre", "HTML", "CSS"],
      "brief":"Planejador de Tarefas com a possibilidade de deletar, atualizar e postar novas tarefas atraves de uma REST API.",
      "video": "https://www.youtube.com/embed/qfRR-xyu_y4",
      "github": "https://github.com/patrickReiis/to-do",
      "lang":"pt" 
    }, 
    {
      "id": 4,
      "title":"Zipzop Garden",
      "content": "Esse projeto não foi difícil de criar, porém foi desgastante. O frontend é algo que é necessário desenvolver como o site vai ser no quesito design e depois implementar isso e também garantir que tudo funcione no computador e no celular e claro, tudo isso de uma forma com acessibilidade. \n\nA vantagem de um projeto frontend desgastante é que depois que o design já foi estabelecido, o resto fica fácil já que não é necessário pensar demais, tu só precisa garantir que a implementação fique idêntica a do design.\n\nEu não sou muito bom com design então eu pesquisei vários sites de jardinagem e depois criei o meu próprio. Isso me ajudou bastante na parte de inspiração.\n\nComo o Steven Wright disse “Copiar de uma pessoa é plágio; copiar de várias é pesquisa” (em tradução livre).\n\n",
      "technologies": ["Javascript", "HTML", "CSS"],
      "brief":"Frontend de uma empresa fake que oferece serviços de jardinagem.",
      "video": "https://www.youtube.com/embed/Oocrh_dB-2w",
      "github": "https://github.com/patrickReiis/zipzop-garden",
      "lang":"pt" 
    }
  ],
  "en": [
      {
          "id": 1,
          "title": "Pajó Indica",
          "content": "Everything started when I was talking with a writer friend of mine, he came up with the idea of creating a website that would have a book recommendation system since big corporations generally don't recommend less popular books for n reasons.\n\nSo after some time of talking and discussing the functionalities of the website we decided to create the Pajó.\n\nBecause this is a full stack project, I started by developing the heart of the application which in this case would be the backend. I planned how the recommendation algorithm would be and I ended up inventing one and implementing it with javascript.\n\nI really wanted to challenge myself so I also developed the project with tests as I never used it before. To do the tests I used the Jest framework.\n\nAfter the heart of the application was done, I had to start to develop the frontend. This friend of mine doesn’t know just writing, he’s also a very talented designer. He sent me the prototypes, logos and basically the entire visual identity of the entire website and I did the part of implementing it, which means I converted everything to code.\n\nThe technology used to make the frontend was Vue.js, something that I also since then haven’t used before, it was pretty to learn how to use this framework.\n\nThe social media of my writer friend are:\nLinkedin: <a href='https://www.linkedin.com/in/jorge-possamai/' target='_blank'>https://www.linkedin.com/in/jorge-possamai/</a> \nYoutube: <a href='https://www.youtube.com/@jorgeluizpossamai4409' target='_blank'>https://www.youtube.com/@jorgeluizpossamai4409</a>\n",
      "technologies": ["Typeorm", "Postgre", "Typescript", "Vue.js", "HTML", "CSS", "Jest", "Node"],
      "video": "https://www.youtube.com/embed/2S2C8l3lwHc",
      "brief": "Fullstack Book Recommendation System that returns similar books along with their percentage match.",
      "github": "https://httpcats.com/401",
      "lang": "en"
      },
    { 
      "id":2,
      "title": "Files to Sent",
      "content": "This project has a very interesting story. It all started when I wanted to create an application that would send automatic files through WhatsApp, so to do that I would need a couple things like: An API, my own API, a Security System and so forth.\n\nWhen I went to search for the WhatsApp API I figured through some websites that it wasn't free and I only had a little bit of savings that I used to help my parents so I couldn’t pay for it, however I really wanted to build something like that.\n\nAfter one day thinking of a way to turn it around, I remembered Telegram and I went search for it and tah-dah: It was free. Of course the Telegram BOT API is not perfect since it has some limitations for example, the bot can't start conversations with normal users but it was better than nothing.\n\nSince the BOT can’t start conversations I needed to change the workflow, like this: \n\n\t1 - User Account registers to my server.\n\t2 - The users that want to receive the files of the User Account need to send a message to the BOT.\n\t3 - User Account makes a POST request to an endpoint with the URL of the file they want to send.\n\nIf everything went right this should happen:\n<img src=\"https://i.imgur.com/cF7KU52.png\" alt=\"Image of person sending files to other people\">\n\nOf course there are some other steps that I did in this application, for example the User Account needs to confirm their email address so they can use this service.\n",
      "technologies": ["Typeorm", "Postgre", "Typescript", "Node", "Argon2", "Nodemailer"],
      "brief":"REST API with user registration and authentication that allows users to send files in Telegram through a Telegram Bot.",
      "video": "https://www.youtube.com/embed/SG5KAqUulP0",
      "github": "https://github.com/patrickReiis/Files-to-Sent",
      "lang":"en" 
    }, 
    {
      "id": 3,
      "title": "To-do Website",
      "content": "\nWell there isn’t much to say about project, since probably everyone did a todolist and if you didn’t, you will :D\n\nJokings apart, I was very happy to start this project since it was the first time I used postgres with Nodejs. So to do this project I needed a way to connect a database with my server, fortunately after a little googling I figured out how to do that.\n\nOne problem that I had however was that I didn’t use any frameworks to do the SQL commands, I did everything by hand without an ORM.\n\nOf course in a real application I wouldn’t do it because it would probably be more dangerous to SQL injection but since it was just a project to learn and build something, I decided not to use an ORM.\n\nOne benefit of developing projects in a lower level way is that you can learn so much more since you have to implement almost all the funcionatilites on your own.\n",
      "technologies": ["Node", "Postgre", "HTML", "CSS"],
      "brief":"To-do website where you can DELETE, UPDATE and POST to-do objects through a REST API.",
      "video": "https://www.youtube.com/embed/qfRR-xyu_y4",
      "github": "https://github.com/patrickReiis/to-do",
      "lang":"en" 
    }, 
    {
      "id": 4,
      "title":"Zipzop Garden",
      "content": "This project wasn’t hard to build but it was very overwhelming. The thing about frontend is that you need to design how the website will look and then implement it and also make sure everything works in both mobile and desktop with accessibility.\n\nThe advantage of an overwhelming frontend project is that once you have the design, the rest is easy because you don’t need to think very much, you just need to make sure it’s the same as the design.\n\nI’m not very good at design so I searched a bunch of gardening websites and then created one of my own. It helped me a lot with inspiration.\n\nAs Steven Wright said “To steal ideas from one person is plagiarism; to steal from many is research.”\n\n",
      "technologies": ["Javascript", "HTML", "CSS"],
      "brief":"Frontend of a fake company that offers gardening services.",
      "video": "https://www.youtube.com/embed/Oocrh_dB-2w",
      "github": "https://github.com/patrickReiis/zipzop-garden",
      "lang":"en" 
    }
  ]
}
